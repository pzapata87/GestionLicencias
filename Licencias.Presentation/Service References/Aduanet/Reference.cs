//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Licencias.Presentation.Aduanet {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Name="ws-ad-pdPort", Namespace="http://www.bea.com/education/webservices/examples/basic/javaclass", ConfigurationName="Aduanet.wsadpdPort")]
    public interface wsadpdPort {
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="NroEnvioGenerado")]
        string enviaArchivoWebService(string toperador, string operador, string clave, string aduana, [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] archivoEnvioByte, string nombreArchivo);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="NroEnvioGenerado")]
        System.Threading.Tasks.Task<string> enviaArchivoWebServiceAsync(string toperador, string operador, string clave, string aduana, [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] archivoEnvioByte, string nombreArchivo);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ArchivoRptaByte")]
        [return: System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")]
        byte[] obtieneArchivoRpta(string toperador, string operador, string clave, string aduana, string ano, string NroEnvioGenerado);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ArchivoRptaByte")]
        [return: System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")]
        System.Threading.Tasks.Task<byte[]> obtieneArchivoRptaAsync(string toperador, string operador, string clave, string aduana, string ano, string NroEnvioGenerado);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="estado")]
        string verficaRUC(string ruc);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="estado")]
        System.Threading.Tasks.Task<string> verficaRUCAsync(string ruc);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="b")]
        object[] verificaDatadoManifiesto(string aduana, string anomc, string numeromc, string conoembar, string viatrans, string tipomani);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="b")]
        System.Threading.Tasks.Task<object[]> verificaDatadoManifiestoAsync(string aduana, string anomc, string numeromc, string conoembar, string viatrans, string tipomani);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="estadoArchivo")]
        string verificaEstadoArchivo(string toperador, string operador, string clave, string aduana, string ano, string NroEnvioGenerado);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="estadoArchivo")]
        System.Threading.Tasks.Task<string> verificaEstadoArchivoAsync(string toperador, string operador, string clave, string aduana, string ano, string NroEnvioGenerado);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface wsadpdPortChannel : Licencias.Presentation.Aduanet.wsadpdPort, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class wsadpdPortClient : System.ServiceModel.ClientBase<Licencias.Presentation.Aduanet.wsadpdPort>, Licencias.Presentation.Aduanet.wsadpdPort {
        
        public wsadpdPortClient() {
        }
        
        public wsadpdPortClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public wsadpdPortClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public wsadpdPortClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public wsadpdPortClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string enviaArchivoWebService(string toperador, string operador, string clave, string aduana, byte[] archivoEnvioByte, string nombreArchivo) {
            return base.Channel.enviaArchivoWebService(toperador, operador, clave, aduana, archivoEnvioByte, nombreArchivo);
        }
        
        public System.Threading.Tasks.Task<string> enviaArchivoWebServiceAsync(string toperador, string operador, string clave, string aduana, byte[] archivoEnvioByte, string nombreArchivo) {
            return base.Channel.enviaArchivoWebServiceAsync(toperador, operador, clave, aduana, archivoEnvioByte, nombreArchivo);
        }
        
        public byte[] obtieneArchivoRpta(string toperador, string operador, string clave, string aduana, string ano, string NroEnvioGenerado) {
            return base.Channel.obtieneArchivoRpta(toperador, operador, clave, aduana, ano, NroEnvioGenerado);
        }
        
        public System.Threading.Tasks.Task<byte[]> obtieneArchivoRptaAsync(string toperador, string operador, string clave, string aduana, string ano, string NroEnvioGenerado) {
            return base.Channel.obtieneArchivoRptaAsync(toperador, operador, clave, aduana, ano, NroEnvioGenerado);
        }
        
        public string verficaRUC(string ruc) {
            return base.Channel.verficaRUC(ruc);
        }
        
        public System.Threading.Tasks.Task<string> verficaRUCAsync(string ruc) {
            return base.Channel.verficaRUCAsync(ruc);
        }
        
        public object[] verificaDatadoManifiesto(string aduana, string anomc, string numeromc, string conoembar, string viatrans, string tipomani) {
            return base.Channel.verificaDatadoManifiesto(aduana, anomc, numeromc, conoembar, viatrans, tipomani);
        }
        
        public System.Threading.Tasks.Task<object[]> verificaDatadoManifiestoAsync(string aduana, string anomc, string numeromc, string conoembar, string viatrans, string tipomani) {
            return base.Channel.verificaDatadoManifiestoAsync(aduana, anomc, numeromc, conoembar, viatrans, tipomani);
        }
        
        public string verificaEstadoArchivo(string toperador, string operador, string clave, string aduana, string ano, string NroEnvioGenerado) {
            return base.Channel.verificaEstadoArchivo(toperador, operador, clave, aduana, ano, NroEnvioGenerado);
        }
        
        public System.Threading.Tasks.Task<string> verificaEstadoArchivoAsync(string toperador, string operador, string clave, string aduana, string ano, string NroEnvioGenerado) {
            return base.Channel.verificaEstadoArchivoAsync(toperador, operador, clave, aduana, ano, NroEnvioGenerado);
        }
    }
}
